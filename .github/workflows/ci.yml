name: CI
on: [push, pull_request]
jobs:

  flake8:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v1.1.1
      - uses: actions/checkout@v1
      - run: python -m pip install flake8
      - run: flake8

  isort:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v1.1.1
      - uses: actions/checkout@v1
      - run: python -m pip install isort
      - run: isort --recursive --check-only --diff django tests scripts

  docs:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v1.1.1
      - uses: actions/checkout@v1
      - run: |
          python setup.py develop
          python -m pip install sphinx pyenchant sphinxcontrib-spelling
      - run: |
          cd docs
          sphinx-build -b spelling -n -q -w doc_warnings -d _build/doctrees -D language=en_US . _build/spelling

  SQLite:
    needs: [flake8, isort]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1.1.1
        with:
          python-version: ${{ matrix.python-version }}
      - run: sudo apt-get install libmemcached-dev
      - uses: actions/checkout@v1
      - run: |
          python setup.py develop
          python -m pip install -r tests/requirements/py3.txt
      - run: tests/runtests.py --verbosity=2

  SpatiaLite:
    needs: [SQLite]
    runs-on: ubuntu-latest
    # GitHub's Python is not build with --enable-loadable-sqlite-extensions
    # and therefore does not support SpatiaLite.
    container: python:3.8.0-buster
    strategy:
      matrix:
        python-version: [3.8]
    steps:
      - run: apt-get update
      - run: apt-get install -y libmemcached-dev libsqlite3-mod-spatialite binutils libproj-dev gdal-bin
      - uses: actions/checkout@v1
      - run: |
          python setup.py develop
          python -m pip install -r tests/requirements/py3.txt
      - run: adduser runner
      - run: runuser runner -c 'tests/runtests.py --verbosity=2 --settings=tests.test_spatialite'

  Windows:
    needs: [flake8, isort]
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.8]
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1.1.1
        with:
          python-version: ${{ matrix.python-version }}
      - uses: actions/checkout@v1
      - run: |
          python setup.py develop
          python -m pip install -r tests/requirements/py3.txt
      - run: tests/runtests.py --verbosity=2

  macOS:
    needs: [flake8, isort]
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [3.8]
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1.1.1
        with:
          python-version: ${{ matrix.python-version }}
      - run: brew install libmemcached
      - uses: actions/checkout@v1
      - run: |
          python setup.py develop
          python -m pip install -r tests/requirements/py3.txt
      - run: python -c "import sqlite3; print(sqlite3.sqlite_version)"
      - run: tests/runtests.py --verbosity=2

  PostgreSQL:
    needs: [flake8, isort]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
    services:
      postgres:
        image: postgres:9.5
        env:
          POSTGRES_USER: django
          POSTGRES_PASSWORD: django
        ports:
          - 5432/tcp
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1.1.1
        with:
          python-version: ${{ matrix.python-version }}
      - run: sudo apt-get install libmemcached-dev
      - uses: actions/checkout@v1
      - run: |
          python setup.py develop
          python -m pip install -r tests/requirements/py3.txt
          python -m pip install -r tests/requirements/postgres.txt
      - run: tests/runtests.py --verbosity=2 --settings=tests.test_postgres
        env:
          DB_PORT: ${{ job.services.postgres.ports[5432] }}

  PostGIS:
    needs: [postgresql]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1.1.1
        with:
          python-version: ${{ matrix.python-version }}
      - run: sudo apt-get install libmemcached-dev
      - uses: actions/checkout@v1
      - run: |
          python setup.py develop
          python -m pip install -r tests/requirements/py3.txt
      # There is no official PostGIS container, therefore we install PostGIS on the VM.
      - name: Set up PostGIS
        run: |
          sudo apt-get install -y postgis
          sudo -u postgres createuser -s -w runner
      - run: python -m pip install -r tests/requirements/postgres.txt
      - run: tests/runtests.py --verbosity=2 --settings=tests.test_postgis

  MySQL:
    needs: [flake8, isort]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
    services:
      mysql:
        image: mysql:5.6
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
        env:
          MYSQL_ROOT_PASSWORD: django
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1.1.1
        with:
          python-version: ${{ matrix.python-version }}
      - run: sudo apt-get install libmemcached-dev libmysqlclient-dev
      - uses: actions/checkout@v1
      - run: |
          python setup.py develop
          python -m pip install -r tests/requirements/py3.txt
          python -m pip install -r tests/requirements/mysql.txt
      - run: tests/runtests.py --verbosity=2 --settings=tests.test_mysql
        env:
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}

  MySQL-GIS:
    needs: [MySQL]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
    services:
      mysql:
        image: mysql:5.6
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
        env:
          MYSQL_ROOT_PASSWORD: django
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1.1.1
        with:
          python-version: ${{ matrix.python-version }}
      - run: sudo apt-get install libmemcached-dev libmysqlclient-dev binutils libproj-dev gdal-bin
      - uses: actions/checkout@v1
      - run: |
          python setup.py develop
          python -m pip install -r tests/requirements/py3.txt
          python -m pip install -r tests/requirements/mysql.txt
      - run: tests/runtests.py --verbosity=2 --settings=tests.test_mysql_gis
        env:
          DB_PORT: ${{ job.services.mysql.ports['3306'] }}

  MariaDB:
    needs: [flake8, isort]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
    services:
      mariadb:
        image: mariadb:10.2
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
        env:
          MYSQL_ROOT_PASSWORD: django
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1.1.1
        with:
          python-version: ${{ matrix.python-version }}
      - run: sudo apt-get install libmemcached-dev libmariadbclient-dev
      - uses: actions/checkout@v1
      - run: |
          python setup.py develop
          python -m pip install -r tests/requirements/py3.txt
          python -m pip install -r tests/requirements/mysql.txt
      - run: tests/runtests.py --verbosity=2 --settings=tests.test_mysql
        env:
          DB_PORT: ${{ job.services.mariadb.ports['3306'] }}

  MariaDB-GIS:
    needs: [MariaDB]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8]
    services:
      mariadb:
        image: mariadb:10.2
        ports:
          - 3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5
        env:
          MYSQL_ROOT_PASSWORD: django
    steps:
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1.1.1
        with:
          python-version: ${{ matrix.python-version }}
      - run: sudo apt-get install libmemcached-dev libmariadbclient-dev binutils libproj-dev gdal-bin
      - uses: actions/checkout@v1
      - run: |
          python setup.py develop
          python -m pip install -r tests/requirements/py3.txt
          python -m pip install -r tests/requirements/mysql.txt
      - run: tests/runtests.py --verbosity=2 --settings=tests.test_mysql_gis
        env:
          DB_PORT: ${{ job.services.mariadb.ports['3306'] }}

  Selenium:
    needs: [flake8, isort]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [firefox, chrome]
    steps:
      - uses: actions/setup-python@v1.1.1
      - run: sudo apt-get install libmemcached-dev
      - uses: actions/checkout@v1
      - run: sudo apt-get install -y google-chrome-stable firefox
        if: matrix.browser == 'chrome'
      - run: sudo apt-get install -y firefox
        if: matrix.browser == 'firefox'
      - run: |
          mkdir bin
          curl -O "https://chromedriver.storage.googleapis.com/$(curl https://chromedriver.storage.googleapis.com/LATEST_RELEASE)/chromedriver_linux64.zip"
          unzip chromedriver_linux64.zip -d bin
        if: matrix.browser == 'chrome'
        name: Set up chromedriver
      - run: |
          mkdir bin
          curl -LO https://github.com/mozilla/geckodriver/releases/download/v0.26.0/geckodriver-v0.26.0-linux64.tar.gz
          tar -xzf geckodriver-v0.26.0-linux64.tar.gz -C bin
        if: matrix.browser == 'firefox'
        name: Set up geckodriver
      - run: |
          python setup.py develop
          python -m pip install -r tests/requirements/py3.txt
      - run: PATH=$PATH:$(pwd)/bin tests/runtests.py --verbosity=2 --selenium=${{ matrix.browser }} --headless
